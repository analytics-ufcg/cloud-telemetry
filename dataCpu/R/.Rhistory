}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i & CPU_UTIL >= i-1 )
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL > i)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - factor_over)
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - factor_over)
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - factor_over & CPU_UTIL >= i-(1 + factor_over) )
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL > i - factor_over)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - factor_over)
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - factor_over)
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - factor_over & CPU_UTIL >= i-(1 + factor_over) )
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL >= i - factor_over)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - factor_over)
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - factor_over)
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - factor_over & CPU_UTIL >= i-(1 + factor_over) )
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL >= i - factor_over)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
print(i)
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - factor_over)
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - factor_over)
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - factor_over & CPU_UTIL >= i-(1 + factor_over) )
if(!(length(selected_data$CPU_UTIL)==0)){
print(i)
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL >= i - factor_over)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
95/100
4.95
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - factor_over)
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - factor_over)
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - factor_over & CPU_UTIL >= i-(1 + factor_over) )
print(selected_data)
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL >= i - factor_over)
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
#funcao geradora dos flavours ####################################################################################################
generate_flavour <- function(data){
aggregated.by.vm <- aggregate(data[,2:3], by=list(data$VM), FUN=mean, na.rm=TRUE)
core_util <- aggregated.by.vm$Cores * (aggregated.by.vm$CPU_UTIL/100)
max_core <- max(aggregated.by.vm$Cores)
copy_data <- aggregated.by.vm
copy_data$CPU_UTIL <- core_util
output <- data.frame(CPU_Flavour = c(), Lose = c(), Over = c())
limKmeans = 0
factor_over = 1 - 0.95
if(length(unique(core_util)) < max_core){
limKmeans = max_core - length(unique(core_util)) + 1
}
if(max_core-limKmeans == 0){
limKmeans = limKmeans - 1
}
for(i in 1:(max_core-limKmeans)){
groups <- kmeans(core_util, i)
centers <- ceiling(groups$centers)
centers <- sort(centers, decreasing = FALSE)
temp_vector <- vector()
lose = 0
over = 0
for(limiar in 1:length(centers)){
if(!(centers[limiar] %in% temp_vector)){
selected_data <- subset(copy_data, CPU_UTIL < centers[limiar] - (centers[limiar]*factor_over))
lose = lose + sum(centers[limiar] - selected_data$CPU_UTIL)
temp_vector[length(temp_vector)+1] = centers[limiar]
}
if(limiar == length(centers)){
selected_data <- subset(copy_data, CPU_UTIL >= centers[limiar] - (centers[limiar]*factor_over))
over = length(selected_data$CPU_UTIL)
}
}
recomend = "Cores"
for(value in temp_vector){
recomend = paste(recomend, value, sep=":")
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
}
lose = 0
over = 0
recomend = "Cores"
for(i in 1:(max_core+1)){
selected_data <- subset(copy_data, CPU_UTIL < i - (i*factor_over) & CPU_UTIL >= i-(1 + i*factor_over))
if(!(length(selected_data$CPU_UTIL)==0)){
lose = lose + sum(i - selected_data$CPU_UTIL)
if(i == max_core+1){
selected_data <- subset(copy_data, CPU_UTIL >= i - (i*factor_over))
over = length(selected_data$CPU_UTIL)
}
recomend = paste(recomend, i, sep=":")
}
}
if(!(recomend %in% output$CPU_Flavour)){
output <- rbind(output, data.frame(CPU_Flavour = c(recomend), Lose = c(lose), Over = c(over)))
}
output
}
#################################################################################################################################
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
#carregando dados ################################################################
data <- read.csv("data_cpu_test03.csv")
##################################################################################
#gerando os flavours #############################################################
out <- generate_flavour(data)
##################################################################################
fix(out)
